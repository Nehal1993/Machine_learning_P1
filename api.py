# -*- coding: utf-8 -*-
"""Api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W6ZipyW4fwy1KkW_uIuvkGpBD8sF-Bd2

##Model testing using Gradio Interface
"""

! pip install gradio

import gradio as gr
import joblib

Loaded_model = joblib.load('/content/drive/MyDrive/ML Models/fuel_cost_6000_miles.sav')

def Load_model(year, Euro_standard, Engine_Capacity, Co2_emission, Combined_metrices, Combined_Imperial, Diesel, LPG, petrol):
    # Convert inputs to the appropriate types (float or int)
    prediction = Loaded_model.predict([[float(year), float(Euro_standard), float(Engine_Capacity), float(Co2_emission),
                                        float(Combined_metrices), float(Combined_Imperial), int(Diesel),
                                        int(LPG), int(petrol)]])
    return f"Fuel cost for 6000 miles is: £{prediction[0]:.2f}"

demo = gr.Interface(fn=Load_model,
                    inputs=["text", "text", "text", "text", "text", "text", "text", "text", "text"],
                    outputs="textbox",
                    title="Fuel Cost Prediction",
                    description="Enter the vehicle details to predict fuel cost for 6000 miles")

if __name__ == "__main__":
    demo.launch()

"""### Model testing via Fast API"""

!pip install fastapi nest-asyncio pyngrok uvicorn

!ngrok config add-authtoken 2m9O2IahFLwPhvozCI3u2l6B2lv_2mYd6CQ2SHEAZRayVS3b

Loaded_model = joblib.load('/content/drive/MyDrive/ML Models/fuel_cost_6000_miles.sav')
from fastapi import FastAPI
import nest_asyncio
from pyngrok import ngrok
import uvicorn

app = FastAPI()
@app.get('/')

async def home():

  return "Welcome to Our Fuel Price Prediction machine learning model"
@app.get('/Instructions')
async def ValueRange():
  return {
        "message": (
            "Year range of our model is 2000-2023, "
            "Euro Standard range is 3.0-5.0, "
            "Engine Capacity is from 600-3500, "
            "Combined Metrices is 6.0-10.0, "
            "Combined Imperial is from 20.0-50, "
            "Enter 1 if it matches your fuel type otherwise enter 0."
        )
    }

@app.get('/{Load_mode}')
async def Load_model(year, Euro_standard, Engine_Capacity, Co2_emission, Combined_metrices, Combined_Imperial, Diesel,LPG, petrol):
    # Convert inputs to the appropriate types (float or int)
    prediction = Loaded_model.predict([[float(year), float(Euro_standard), float(Engine_Capacity), float(Co2_emission),
                                        float(Combined_metrices), float(Combined_Imperial), int(Diesel),
                                        int(LPG), int(petrol)]])
    #return {"Fuel cost for 6000 miles": f"£{prediction[0]:.2f}"}
    return f"Fuel cost for 6000 miles is: £{prediction[0]:.2f}"




ngrok_tunnel = ngrok.connect(8000)
print('Public URL:', ngrok_tunnel.public_url)
nest_asyncio.apply()
uvicorn.run(app, port=8000)